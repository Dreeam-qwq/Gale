From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 24 Nov 2022 01:19:12 +0100
Subject: [PATCH] SIMD support

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Gale - https://galemc.org

This patch is based on the following patch:
"Add SIMD utilities"
By: Kevin Raneri <kevin.raneri@gmail.com>
As part of: Pufferfish (https://github.com/pufferfish-gg/Pufferfish)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/build.gradle.kts b/build.gradle.kts
index 6827ccd77dbba737b80bd14456c54fc54f8058f2..5b0693899daede245b43e9e9039cd1d05b9b5849 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -73,6 +73,7 @@ tasks.withType<JavaCompile> {
     compilerArgs.add("-Xlint:-module")
     compilerArgs.add("-Xlint:-removal")
     compilerArgs.add("-Xlint:-dep-ann")
+    compilerArgs.add("--add-modules=jdk.incubator.vector") // Gale - Pufferfish - SIMD support
 }
 // Gale end - hide irrelevant compilation warnings
 
@@ -202,6 +203,7 @@ fun TaskContainer.registerRunTask(
     jvmArgs("--enable-preview")
     jvmArgs("--add-opens=java.base/java.lang=ALL-UNNAMED")
     // Gale end - enable virtual threads for development runs
+    jvmArgs("--add-modules=jdk.incubator.vector") // Gale - Pufferfish - SIMD support
 
     doFirst {
         workingDir.mkdirs()
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 432731a10443cd7ee62f79693b27e9759581b9bb..c2a3839f21afeefb37a760b204a4da43cd64a9ae 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -929,6 +929,46 @@ public class Metrics {
                 metrics.addCustomChart(new Metrics.DrilldownPie("gale_semantic_version", () -> semanticVersionMap));
                 // Gale end - semantic version - include in metrics
 
+                // Gale start - SIMD support - include in metrics
+                Map<String, Map<String, Integer>> simdSupportMap = new HashMap<>(2); // Empty until initialized
+                metrics.addCustomChart(new Metrics.DrilldownPie("simd_support", () -> {
+                    if (!gg.pufferfish.pufferfish.simd.SIMDDetection.isInitialized()) {
+                        return null;
+                    }
+                    if (simdSupportMap.isEmpty()) {
+                        // Initialize
+                        boolean isEnabled = gg.pufferfish.pufferfish.simd.SIMDDetection.isEnabled();
+
+                        // use details as lower dimension
+                        Map<String, Integer> entry = new HashMap<>(2);
+                        String details;
+                        if (isEnabled) {
+                            details = "int " + gg.pufferfish.pufferfish.simd.SIMDDetection.intVectorBitSize() + "*" + gg.pufferfish.pufferfish.simd.SIMDDetection.intElementSize() + ", float " + gg.pufferfish.pufferfish.simd.SIMDDetection.floatVectorBitSize() + "*" + gg.pufferfish.pufferfish.simd.SIMDDetection.floatElementSize();
+                        } else {
+                            if (!gg.pufferfish.pufferfish.simd.SIMDDetection.supportingJavaVersion()) {
+                                details = "unsupported Java";
+                                try {
+                                    var javaVersion = gg.pufferfish.pufferfish.simd.SIMDDetection.getJavaVersion();
+                                    details += " (" + javaVersion + ")";
+                                } catch (Throwable ignored) {}
+                            } else if (!gg.pufferfish.pufferfish.simd.SIMDDetection.testRunCompleted()) {
+                                details = "test failed";
+                            } else if (gg.pufferfish.pufferfish.simd.SIMDDetection.unsupportingLaneSize()) {
+                                details = "no supporting lane size";
+                            } else {
+                                details = "other reason";
+                            }
+                        }
+                        entry.put(details, 1);
+
+                        // use enabled or not as higher dimension
+                        simdSupportMap.put(String.valueOf(isEnabled), entry);
+
+                    }
+                    return simdSupportMap;
+                }));
+                // Gale end - SIMD support - include in metrics
+
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 5be4267d88604210b7bfcc03b2c2056e0a9f0fb0..13d9fc5f4e6316b3fd6ef5ab50f78c7117e2df3a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -14,6 +14,8 @@ import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
+
+import gg.pufferfish.pufferfish.simd.SIMDDetection;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -46,6 +48,7 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import org.galemc.gale.command.GaleCommands;
+import org.galemc.gale.configuration.GaleGlobalConfiguration;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -223,6 +226,13 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
 
+        // Gale start - Pufferfish - SIMD support
+        // Initialize vectorization
+        try {
+            SIMDDetection.initialize();
+        } catch (Throwable ignored) {}
+        // Gale start - Pufferfish - SIMD support
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
diff --git a/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java b/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
index 2a3cd1baab364126d10a42c8ab59f3da8ca9bdfb..5ade5d2ff3a68cf9e0240fc86e4b63432cb899c0 100644
--- a/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
+++ b/src/main/java/org/galemc/gale/configuration/GaleGlobalConfiguration.java
@@ -25,6 +25,14 @@ public class GaleGlobalConfiguration extends ConfigurationPart {
 
         public int dummyValue = 0;
 
+        // Gale start - Pufferfish - SIMD support
+        public Simd simd;
+        public class Simd extends ConfigurationPart {
+            public boolean warnIfDisabled = true;
+            public boolean logVectorSizesToConsole = false;
+        }
+        // Gale end - Pufferfish - SIMD support
+
     }
 
     public Misc misc;
