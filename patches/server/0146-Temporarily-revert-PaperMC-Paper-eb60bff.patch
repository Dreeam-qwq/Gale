From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: granny <granny@purpurmc.org>
Date: Sat, 16 Sep 2023 21:28:59 -0700
Subject: [PATCH] Temporarily revert PaperMC/Paper@eb60bff

License: MIT (https://opensource.org/licenses/MIT)
Gale - https://galemc.org

This patch is based on the following patch:
"temporarily revert PaperMC/Paper@eb60bff"
By: granny <granny@purpurmc.org>
As part of: Purpur (https://github.com/PurpurMC/Purpur)
Licensed under: MIT (https://opensource.org/licenses/MIT)

* Purpur description *

updating paperweight to v1.5.6 breaks compileJava tasks

since changes in PaperMC/Paper@eb60bff require functions added by paperweight v1.5.6, the commit needs to be reverted

this patch can be deleted once createReobfBundlerJar and createReobfPaperclipJar don't throw an error while using the latest paperweight version

* Purpur copyright *

MIT License

Copyright (c) 2019-2022 PurpurMC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

diff --git a/build.gradle.kts b/build.gradle.kts
index 6c93ba174506822223301535dc5b619e5623927a..e1a366999943b321c499af95417a029137417af1 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -226,16 +226,18 @@ tasks.registerRunTask("runReobf") {
     classpath(runtimeClasspathWithoutVanillaServer)
 }
 
-val runtimeClasspathForRunDev = sourceSets.main.flatMap { src ->
+/*val runtimeClasspathForRunDev = sourceSets.main.flatMap { src -> // Purpur
     src.runtimeClasspath.elements.map { elements ->
         elements.filterNot { file -> file.asFile.endsWith("minecraft.jar") }
     }
-}
+}*/ // Purpur
 tasks.registerRunTask("runDev") {
     description = "Spin up a non-relocated Mojang-mapped test server"
-    classpath(tasks.filterProjectDir.flatMap { it.outputJar })
-    classpath(runtimeClasspathForRunDev)
-    jvmArgs("-DPaper.isRunDev=true")
+    // Purpur start
+    classpath(sourceSets.main.map { it.runtimeClasspath })
+    // classpath(runtimeClasspathForRunDev)
+    // jvmArgs("-DPaper.isRunDev=true")
+    // Purpur end
 }
 
 // Gale start - package license into jar
diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 397f985756c5bc6c11a32c844d536000dd922ed1..bbfa50babc84f1c6b160c286f871042f522745e3 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -222,7 +222,7 @@ public final class ChatProcessor {
         final ChatRenderer renderer = event.renderer();
 
         final Set<Audience> viewers = event.viewers();
-        final ResourceKey<ChatType> chatTypeKey = renderer instanceof ChatRenderer.Default ? ChatType.CHAT : PAPER_RAW;
+        final ResourceKey<ChatType> chatTypeKey = renderer instanceof ChatRenderer.Default ? ChatType.CHAT : ChatType.RAW; // Purpur
         final ChatType.Bound chatType = ChatType.bind(chatTypeKey, this.player.level().registryAccess(), PaperAdventure.asVanilla(displayName(player)));
 
         OutgoingChat outgoingChat = viewers instanceof LazyChatAudienceSet lazyAudienceSet && lazyAudienceSet.isLazy() ? new ServerOutgoingChat() : new ViewersOutgoingChat();
diff --git a/src/main/java/net/minecraft/network/chat/ChatType.java b/src/main/java/net/minecraft/network/chat/ChatType.java
index 618a9335faf9df4a7d0cc971a8e62a0e3b239aa3..160600470c2bdb4c58f5375626a194b1b372f458 100644
--- a/src/main/java/net/minecraft/network/chat/ChatType.java
+++ b/src/main/java/net/minecraft/network/chat/ChatType.java
@@ -26,6 +26,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
     public static final ResourceKey<ChatType> TEAM_MSG_COMMAND_INCOMING = create("team_msg_command_incoming");
     public static final ResourceKey<ChatType> TEAM_MSG_COMMAND_OUTGOING = create("team_msg_command_outgoing");
     public static final ResourceKey<ChatType> EMOTE_COMMAND = create("emote_command");
+    public static final ResourceKey<ChatType> RAW = create("raw"); // Purpur
 
     private static ResourceKey<ChatType> create(String id) {
         return ResourceKey.create(Registries.CHAT_TYPE, new ResourceLocation(id));
@@ -39,6 +40,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
         messageTypeRegisterable.register(TEAM_MSG_COMMAND_INCOMING, new ChatType(ChatTypeDecoration.teamMessage("chat.type.team.text"), ChatTypeDecoration.withSender("chat.type.text.narrate")));
         messageTypeRegisterable.register(TEAM_MSG_COMMAND_OUTGOING, new ChatType(ChatTypeDecoration.teamMessage("chat.type.team.sent"), ChatTypeDecoration.withSender("chat.type.text.narrate")));
         messageTypeRegisterable.register(EMOTE_COMMAND, new ChatType(ChatTypeDecoration.withSender("chat.type.emote"), ChatTypeDecoration.withSender("chat.type.emote")));
+        messageTypeRegisterable.register(RAW, new ChatType(new ChatTypeDecoration("%s", java.util.List.of(ChatTypeDecoration.Parameter.CONTENT), Style.EMPTY), new ChatTypeDecoration("%s", java.util.List.of(ChatTypeDecoration.Parameter.CONTENT), Style.EMPTY))); // Purpur
     }
 
     public static ChatType.Bound bind(ResourceKey<ChatType> typeKey, Entity entity) {
diff --git a/src/main/java/net/minecraft/resources/RegistryDataLoader.java b/src/main/java/net/minecraft/resources/RegistryDataLoader.java
index 5f051cb22ae77f4d8994b07ac5b963bd0ff05673..aab07057606ee9c0893286bb3df82e84b87793f9 100644
--- a/src/main/java/net/minecraft/resources/RegistryDataLoader.java
+++ b/src/main/java/net/minecraft/resources/RegistryDataLoader.java
@@ -61,6 +61,11 @@ public class RegistryDataLoader {
         RegistryOps.RegistryInfoLookup registryInfoLookup = createContext(baseRegistryManager, list);
         list.forEach((loader) -> {
             loader.getSecond().load(resourceManager, registryInfoLookup);
+            // Purpur start
+            if (loader.getFirst().key() == Registries.CHAT_TYPE) {
+                Registry.register((Registry<ChatType>) loader.getFirst(), ChatType.RAW, new ChatType(new net.minecraft.network.chat.ChatTypeDecoration("%s", List.of(net.minecraft.network.chat.ChatTypeDecoration.Parameter.CONTENT), net.minecraft.network.chat.Style.EMPTY), new net.minecraft.network.chat.ChatTypeDecoration("%s", List.of(net.minecraft.network.chat.ChatTypeDecoration.Parameter.CONTENT), net.minecraft.network.chat.Style.EMPTY))); // CraftBukkit
+            }
+            // Purpur end
         });
         list.forEach((loader) -> {
             Registry<?> registry = loader.getFirst();
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 1577a6aeeaaf6a131008f536a125b9b986f3139e..68d623d1ab1b7aad1fa7eacbb67c2a05e67c27e0 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -109,7 +109,7 @@ public class Main {
 
         try {
             // Paper start
-            if (Boolean.getBoolean("Paper.isRunDev")) {
+            /*if (Boolean.getBoolean("Paper.isRunDev")) { // Purpur
                 net.minecraft.server.packs.VanillaPackResourcesBuilder.developmentConfig = builder -> {
                     try {
                         builder.pushAssetPath(net.minecraft.server.packs.PackType.SERVER_DATA, net.minecraft.server.packs.VanillaPackResourcesBuilder.safeGetPath(java.util.Objects.requireNonNull(Main.class.getResource("/data/.paperassetsroot"), "Missing required .paperassetsroot file").toURI()).getParent());
@@ -117,7 +117,7 @@ public class Main {
                         throw new RuntimeException(ex);
                     }
                 };
-            }
+            }*/ // Purpur
             // Paper end
 
             Path path = (Path) optionset.valueOf("pidFile"); // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
index 4ed8f38ba9c7b075b99a0da0e213a1e9d03ac717..1770525285a557e3587d45bfb52b9822c1d4acd8 100644
--- a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
@@ -32,7 +32,7 @@ public class ServerPacksSource extends BuiltInPackSource {
 
     @VisibleForTesting
     public static VanillaPackResources createVanillaPackSource() {
-        return (new VanillaPackResourcesBuilder()).setMetadata(BUILT_IN_METADATA).exposeNamespace("minecraft", ResourceLocation.PAPER_NAMESPACE).applyDevelopmentConfig().pushJarResources().build(); // Paper
+        return (new VanillaPackResourcesBuilder()).setMetadata(BUILT_IN_METADATA).exposeNamespace("minecraft").applyDevelopmentConfig().pushJarResources().build(); // Paper // Purpur
     }
 
     @Override
